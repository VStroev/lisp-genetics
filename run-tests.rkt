#lang racket

(define (score set graph)
  (define (add-to-all link all-verts)
    (let ((contain-first (member (car link) all-verts)) (contain-second (member (cadr link) all-verts)))
      (cond ((and contain-first contain-second) all-verts)
            (contain-first (cons (cadr link) all-verts))
            (else (cons (car link) all-verts)))))
            
  (define (count-score set graph covered-verts all-verts)
    (if (null? graph) (/ (length covered-verts) (length all-verts))
        (let ((link (car graph)))
          (cond ((member (car link) set) (count-score set (cdr graph) (cons (cadr link) covered-verts) (add-to-all link all-verts)))
                ((member (cadr link) set) (count-score set (cdr graph) (cons (car link) covered-verts) (add-to-all link all-verts)))
                (else (count-score set (cdr graph) covered-verts (add-to-all link all-verts)))))))
  (count-score set graph set set))
  
(define (test-sol solution k min-dom graph )
  (print 'min-dom=)
  (println min-dom)
  (println graph)
  (print 'k=)
  (println k)
  (let ((ret (solution graph k)))
    (println ret)
    (let ((answer (and (eq? (score (caddr ret) graph) 1)
                  (eq? (<= min-dom k) (car ret))
                  (or (not (car ret))
                      (and (<= (cadr ret) k) (<= min-dom (cadr ret)))))))
    (println answer)
    (newline)
      answer)))

(define (run-tests solution)
  (define (run file solution)
    (let ((test (read file)))
      (if (eof-object? test) '()
          (begin
            (test-sol solution (car test) (cadr test) (caddr test))
            (run file solution)))))
  (let ((file (open-input-file (read))))
    (run file solution)))
(run-tests (lambda (x y) (list #t 1 (list 0))))