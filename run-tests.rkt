#lang racket
(require "sol.rkt")
  
(define (test-sol solution k min-dom graph )
  (print 'min-dom=)
  (println min-dom)
  (println graph)
  (print 'k=)
  (println k)
  (let ((ret (solution graph k)))
    (println ret)
    (let ((answer (and (eq? (<= min-dom k) (car ret))
                       (or (< k min-dom) (eq? (score (caddr ret) graph k) 1))
                       (or (not (car ret))
                           (and (<= (cadr ret) k) (<= min-dom (cadr ret)))))))
    (println answer)
    (newline)
      answer)))

(define (run-tests solution)
  (define (run file solution)
    (let ((test (read file)))
      (if (eof-object? test) '()
          (begin
            (test-sol solution (car test) (cadr test) (caddr test))
            (run file solution)))))
  (let ((file (open-input-file (read))))
    (run file solution)))
(run-tests solution)